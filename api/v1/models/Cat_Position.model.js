const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const Cat_PositionSchema = new Schema({
  ID: { type: Schema.Types.String },
  PositionName: { type: Schema.Types.String },
  Code: { type: Schema.Types.String },
  OrgStructureID: { type: Schema.Types.String },
  CostCentreID: { type: Schema.Types.String },
  TargetAmount: { type: Schema.Types.String },
  ServerUpdate: { type: Schema.Types.String },
  ServerCreate: { type: Schema.Types.String },
  UserUpdate: { type: Schema.Types.String },
  UserCreate: { type: Schema.Types.String },
  DateCreate: { type: Schema.Types.String },
  DateUpdate: { type: Schema.Types.String },
  UserLockID: { type: Schema.Types.String },
  DateLock: { type: Schema.Types.String },
  IsDelete: { type: Schema.Types.String },
  IPCreate: { type: Schema.Types.String },
  IPUpdate: { type: Schema.Types.String },
  PositionEngName: { type: Schema.Types.String },
  Description: { type: Schema.Types.String },
  JobtitleID: { type: Schema.Types.String },
  AnnualDays: { type: Schema.Types.String },
  ApproverID1: { type: Schema.Types.String },
  ApproverID2: { type: Schema.Types.String },
  ApproverID3: { type: Schema.Types.String },
  SalaryClassID: { type: Schema.Types.String },
  GradePayrollID: { type: Schema.Types.String },
  GradeAttendanceID: { type: Schema.Types.String },
  WorkPlaceID: { type: Schema.Types.String },
  LaborType: { type: Schema.Types.String },
  EmployeeTypeID: { type: Schema.Types.String },
  ParentPositionID: { type: Schema.Types.String },
  AbilityTileID: { type: Schema.Types.String },
  FormType: { type: Schema.Types.String },
  PayrollGroupID: { type: Schema.Types.String },
  IsRoot: { type: Schema.Types.String },
  IsHarmFul: { type: Schema.Types.String },
  JobDescription: { type: Schema.Types.String },
  Permission: { type: Schema.Types.String },
  TaskLongTerm: { type: Schema.Types.String },
  TaskShortTerm: { type: Schema.Types.String },
  OrderNumber: { type: Schema.Types.String },
  Gender: { type: Schema.Types.String },
  FromAge: { type: Schema.Types.String },
  ToAge: { type: Schema.Types.String },
  EducationLevelID: { type: Schema.Types.String },
  FromExpYear: { type: Schema.Types.String },
  FromExpTo: { type: Schema.Types.String },
  PositionID: { type: Schema.Types.String },
  RewardedTitlesID: { type: Schema.Types.String },
  MajorID: { type: Schema.Types.String },
  SubMajorID: { type: Schema.Types.String },
  EducationLevelIDs: { type: Schema.Types.String },
  PositionIDs: { type: Schema.Types.String },
  RewardedTitlesIDs: { type: Schema.Types.String },
  MajorIDs: { type: Schema.Types.String },
  SubMajorIDs: { type: Schema.Types.String },
  ProbationDay: { type: Schema.Types.String },
  PositionOtherName: { type: Schema.Types.String },
  RankRateID: { type: Schema.Types.String },
  UsualAllowanceGroupID: { type: Schema.Types.String },
  SortID: { type: Schema.Types.String },
  FileAttachment: { type: Schema.Types.String },
  NoLevelInterview: { type: Schema.Types.String },
  InterviewDetail: { type: Schema.Types.String },
  HeadPosProfileID: { type: Schema.Types.String },
  OtherNumber: { type: Schema.Types.String },
  PositionNameInLaw: { type: Schema.Types.String },
  Requirement: { type: Schema.Types.String },
  EmployeeGroupID: { type: Schema.Types.String },
  OrgStructure: { type: Schema.Types.String },
});

const Cat_PositionModel = mongoose.model("Cat_Position", Cat_PositionSchema);

module.exports = Cat_PositionModel;

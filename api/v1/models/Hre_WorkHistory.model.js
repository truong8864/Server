const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const Hre_WorkHistorySchema = new Schema({
  ID: { type: Schema.Types.String },
  Code: { type: Schema.Types.String },
  ProfileID: { type: Schema.Types.String },
  DateEffective: { type: Schema.Types.String },
  OrganizationStructureID: { type: Schema.Types.String },
  PositionID: { type: Schema.Types.String },
  CostCentreID: { type: Schema.Types.String },
  LaborType: { type: Schema.Types.String },
  EmployeeTypeID: { type: Schema.Types.String },
  PayrollGroupID: { type: Schema.Types.String },
  WorkLocation: { type: Schema.Types.String },
  Supervisor: { type: Schema.Types.String },
  ServerUpdate: { type: Schema.Types.String },
  ServerCreate: { type: Schema.Types.String },
  UserUpdate: { type: Schema.Types.String },
  UserCreate: { type: Schema.Types.String },
  DateCreate: { type: Schema.Types.String },
  DateUpdate: { type: Schema.Types.String },
  UserLockID: { type: Schema.Types.String },
  DateLock: { type: Schema.Types.String },
  IsDelete: { type: Schema.Types.String },
  IPCreate: { type: Schema.Types.String },
  IPUpdate: { type: Schema.Types.String },
  JobTitleID: { type: Schema.Types.String },
  Status: { type: Schema.Types.String },
  FileAttach: { type: Schema.Types.String },
  Note: { type: Schema.Types.String },
  Description: { type: Schema.Types.String },
  RequirCondit: { type: Schema.Types.String },
  Rromotion: { type: Schema.Types.String },
  ShortTasks: { type: Schema.Types.String },
  LongTasks: { type: Schema.Types.String },
  Role: { type: Schema.Types.String },
  IsJobTitleMain: { type: Schema.Types.String },
  DecisionNo: { type: Schema.Types.String },
  DecisionDate: { type: Schema.Types.String },
  DecisionPersion: { type: Schema.Types.String },
  LocationCode: { type: Schema.Types.String },
  OrgOld: { type: Schema.Types.String },
  PositionOld: { type: Schema.Types.String },
  LaborTypeOld: { type: Schema.Types.String },
  CostCentreOld: { type: Schema.Types.String },
  PayrollGroupOld: { type: Schema.Types.String },
  WorkLocationOld: { type: Schema.Types.String },
  LocationCodeOld: { type: Schema.Types.String },
  JobTitleOld: { type: Schema.Types.String },
  EmployeeTypeOld: { type: Schema.Types.String },
  SupervisorOld: { type: Schema.Types.String },
  CodeOld: { type: Schema.Types.String },
  OrgLineDefaultID: { type: Schema.Types.String },
  ProducteLineDefaultID: { type: Schema.Types.String },
  FormType: { type: Schema.Types.String },
  CodeEmp: { type: Schema.Types.String },
  IsExistentConcurrentPosition: { type: Schema.Types.String },
  PositionType: { type: Schema.Types.String },
  PositionRate: { type: Schema.Types.String },
  ShopID: { type: Schema.Types.String },
  JRType: { type: Schema.Types.String },
  UserApprove: { type: Schema.Types.String },
  SalaryClassID: { type: Schema.Types.String },
  Duration: { type: Schema.Types.String },
  DateNotice: { type: Schema.Types.String },
  TypeOfTransferID: { type: Schema.Types.String },
  DateComeBack: { type: Schema.Types.String },
  SalaryClassNameOld: { type: Schema.Types.String },
  OrgStructureOldID: { type: Schema.Types.String },
  CostSourceID: { type: Schema.Types.String },
  HighSupervisor: { type: Schema.Types.String },
  AbilityTileID: { type: Schema.Types.String },
  SubjectGroupID: { type: Schema.Types.String },
  SubjectID: { type: Schema.Types.String },
  EmployeeGroupID: { type: Schema.Types.String },
  NationalityGroupID: { type: Schema.Types.String },
  CostActivityID: { type: Schema.Types.String },
  JobDescription: { type: Schema.Types.String },
  Permission: { type: Schema.Types.String },
  TaskLongTerm: { type: Schema.Types.String },
  TaskShortTerm: { type: Schema.Types.String },
  CompanyID: { type: Schema.Types.String },
  WorkPlaceID: { type: Schema.Types.String },
  RegionID: { type: Schema.Types.String },
  SuggetedUserID: { type: Schema.Types.String },
  DateSugget: { type: Schema.Types.String },
  SortID: { type: Schema.Types.String },
  PayrollCategoryID: { type: Schema.Types.String },
  MidSupervisor: { type: Schema.Types.String },
  UnitStructureID: { type: Schema.Types.String },
  UserSubmit: { type: Schema.Types.String },
  UserApproveID: { type: Schema.Types.String },
  UserApproveID2: { type: Schema.Types.String },
  UserApproveID3: { type: Schema.Types.String },
  UserApproveID4: { type: Schema.Types.String },
  UserProcessID: { type: Schema.Types.String },
  UserProcessID2: { type: Schema.Types.String },
  UserProcessID3: { type: Schema.Types.String },
  UserProcessID4: { type: Schema.Types.String },
  DateProcess: { type: Schema.Types.String },
  DateProcess2: { type: Schema.Types.String },
  DateProcess3: { type: Schema.Types.String },
  DateProcess4: { type: Schema.Types.String },
  SkillLevel: { type: Schema.Types.String },
  UsualAllowanceGroupID: { type: Schema.Types.String },
  CompanyOldID: { type: Schema.Types.String },
  DelegateCompanyID: { type: Schema.Types.String },
  ReplaceForProfileID: { type: Schema.Types.String },
  ReplaceForReasonID: { type: Schema.Types.String },
  IsCreateBasicSalary: { type: Schema.Types.String },
  IsNotComputProductSalary: { type: Schema.Types.String },
  TypeWorkHistory: { type: Schema.Types.String },
  AreaPostJobWorkID: { type: Schema.Types.String },
  IsUpdateProfile: { type: Schema.Types.String },
  NoSendMail: { type: Schema.Types.String },
});

const Hre_WorkHistoryModel = mongoose.model(
  "Hre_WorkHistory",
  Hre_WorkHistorySchema,
);

module.exports = Hre_WorkHistoryModel;
